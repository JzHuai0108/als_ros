
node_name: als_mcl
scan_name: /scan
odom_name: /odom
map_name: /map

pose_name: /mcl_pose
particles_name: /mcl_particles
unknown_scan_name: /unknown_scan
residual_errors_name: /residual_errors
reliability_marker_name: /reliability_marker_name


# Output messages from GL pose sampler
gl_sampled_poses_name: /gl_sampled_poses
local_map_name: /gl_local_map
sdf_keypoints_name: /gl_sdf_keypoints
local_sdf_keypoints_name: /gl_local_sdf_keypoints

# TF frames
laser_frame: laser
base_link_frame: base_link
map_frame: map
odom_frame: odom

# If broadcast_tf is true, the localizer broadcasts transformation between the map and odometry frames.
broadcast_tf: true

# If use_odom_tf is false, transformation from the map to base link is directly broadcast.
# If your odometry node does not broadcast transformation between odometry and base link, this must be false.
use_odom_tf: true
publish_robot_tf: false


# MCL parameters
# Initial pose (x [m], y [m], yaw [deg])
initial_pose_x: 0.0
initial_pose_y: 0.0
initial_pose_yaw: 180

# Initial noise
initial_noise_x: 1.2
initial_noise_y: 1.2
initial_noise_yaw: 1.0

# transform tolerance between mcl pose and odometry in second
transform_tolerance: 0.25
use_augmented_mcl: true

# 0: likelihood field model, 1, beam model, 2: class conditional measurement model
# The class conditional measurement model is highly recommended for pose tracking.
measurement_model_type: 2

# Numbers of particles. In this MCL package, the numbers of the particles are constant.
particle_num: 400

# If use_augmented_mcl is true, augmented MCL is used.
# Augmented MCL adds random particles when doing resampling if MCL might fail localization.
# alpha_slow and alpha_fast are parameters for augmented MCL (0 < alpha_slow << alpha_fast < 1).
# If add_random_particles_in_resampling is true, random particles are also added in resampling.
# (random_particles_rate * particle_num) particles are added
# if add_random_particles_in_resampling is true. random_particles_rate must be positive.
alpha_slow: 0.001
alpha_fast: 0.99
add_random_particles_in_resampling: true
random_particles_rate: 0.1

# If use_omni_directional_model is true, the omnidirectional motion model is used.
# A default motion model is the differential drive model.
use_omni_directional_model: false


# If reject_unknown_scan is true,
# scans that might measure unknown obstacles are rejected before likelihood calculation.
# The scan rejection will perform when the likelihood field or beam models is used.
# If publish_unknown_scan is true, the rejected scan is published.
# unknown_scan_prob_threshold included from 0 to 1 is a threshold to reject the unknown scan.
# unknown_scan_prob_threshold must be included from 0 to 1.
reject_unknown_scan: false
publish_unknown_scan: true
unknown_scan_prob_threshold: 0.9


# If publish_residual_errors is true,
# the residual errors from the estimated pose will be published.
publish_residual_errors: false

# Dense measurements must not be used for localization. 
# You can control how much measurements are skipped by scan_step.
# scan_step must be larger than 0.
# E.e., if you use Hokuyo LiDAR TOP-URG, it can measure 1081 points
# and scan_step = 10 or 5 is recommended.
scan_step: 5

# The measurement models' parameters
# The sum of z_hit, z_max, and z_rand must be 1
# when the likelihood field or class coditional measurment models are used. 
# The sum of z_hit, z_short, z_max, and z_rand must be 1 when the beam model is used.
z_hit: 0.95
z_short: 0.2
z_max: 0.01
z_rand: 0.04
var_hit: 0.04
lambda_short: 1.0
lambda_unknown: 0.01

# A parameter for the class conditional measurement model. 0.5 is recommended.
# This must be included from 0 to 1.
known_class_prior: 0.5

# If rate of the effective sample size is less than resample_threshold_ess,
# resampling will be performed. This must be included from 0 to 1.
resample_threshold_ess: 0.5

# If estimate_reliability is true, the reliability estimation is performed.
estimate_reliability: true

# A localization failure detector is used to perform the reliability estimation.
# 0: mean absolute error.
# Note that only mean-absolute-error-based classifier is supported in the current version.
classifier_type: 0

# Mean absolute error (MAE)-based localization failure detector.
# If classifier_type = 0, these parameters must be appropriately set.
# mae_max_residual_error and mae_histogram_bin_width must be larger than 0.
mae_classifier_dir: /external_storage/Android/data/AndroidSensors/classifiers/MAE/
mae_max_residual_error: 0.5
mae_histogram_bin_width: 0.05

# If use_gl_pose_sampler is true, global-localization-based pose sampler is used.
# The sampled poses are integrated to the mcl estimate via importance sampling.
use_gl_pose_sampler: false

# fuse_gl_pose_sampler_only_unreliable is true,
# the sampled pose is fused if reliability is less than 90 %.
# This flag is ignored if estimate_reliability is false.
fuse_gl_pose_sampler_only_unreliable: false

# Time threshold to fuse the global-localization (GL)-based pose sampling result.
# If time difference between the laser scan used for MCL and GL pose sampling result exceeds the threshold,
# the pose sampling result is not fused.
# gl_sampled_pose_time_th must be larger than 0 (unit is second).
gl_sampled_pose_time_th: 1.0

# Assume that the predictive distribution can be approximately represented by the Gaussian mixture model (GMM)
# based on the particles updated by the motion model.
# GMM is used to calculate likelihood of the poses drawn by the GL pose sampler.
# Following variances are parameters for GMM.
# gmm_positional_variance and gmm_angular_variance must be larger than 0.
gmm_positional_variance: 0.01
gmm_angular_variance: 0.01

# Rate of uniform distribution in approximation of the predictive distribution
# If pred_dist_unif_rate is 0.0,
# large localization error cannot be compensated even if global localization is used.
# This must be included from 0 to 1.
pred_dist_unif_rate: 0.05

# If use_mrf_failure_detector is true, Markov-random-fields-based localization failure detector is used.
# Note that Note that the failure detector just publishes failure probability.
use_mrf_failure_detector: false

# localization Hz
localization_hz: 10.0



# Parameters used for randam particles in resampling (x, y, yaw).
# These parameters are used when use_augmented_mcl or add_random_particles_in_resampling is true.
random_particles_noise: [0.05, 0.05, 0.1]

# Motion noises: ddm and odm stand for differential drive model and omni directional model, respectively.
# odom_noise_ddm: [1.0, 0.5, 0.5, 1.5]
odom_noise_odm: [1.0, 0.5, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 1.0]

# Parameters used in the reliability transition model
# If the values are large, reliability quickly decrease according to robot move.
# If the values are zero, reliability does not decrease even if the robot moves.
rel_trans_ddm: [0.0, 0.0]
rel_trans_odm: [0.0, 0.0, 0.0]

# Resampling thresholds to delta x, y, distance, yaw, and time, respectively. 
# If all parameters are set to minus, these thresholds are ignored.
resample_thresholds: [0.2, 0.2, 0.2, 0.02, -99999.0]
